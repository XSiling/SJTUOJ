#include <iostream>
#include <iomanip>
using namespace std;
class MyComplex
{
    friend istream& operator>>(istream& is,MyComplex&obj);
    friend ostream& operator<<(ostream& os,const MyComplex&obj);
private:
    double x=1,y=0;
public:
    MyComplex operator+(const MyComplex&b) const
    {
        MyComplex tmp;
        tmp.x=x+b.x;
        tmp.y=y+b.y;
        return tmp;
    }
    MyComplex operator-(const MyComplex&b) const
    {
        MyComplex tmp;
        tmp.x=x-b.x;
        tmp.y=y-b.y;
        return tmp;
    }
    MyComplex operator*(const MyComplex&b) const
    {
        MyComplex tmp;
        tmp.x=x*b.x-y*b.y;
        tmp.y=x*b.y+y*b.x;
        return tmp;
    }
    MyComplex operator/(const MyComplex&b) const
    {
        MyComplex tmp;
        tmp.x=(x*b.x+y*b.y)/(b.x*b.x+b.y*b.y);
        tmp.y=(y*b.x-x*b.y)/(b.x*b.x+b.y*b.y);
        return tmp;
    }
    MyComplex& operator+=(const MyComplex&b)
    {
        x=x+b.x;
        y=y+b.y;
        return *this;
    }
    MyComplex& operator-=(const MyComplex&b)
    {
        x=x-b.x;
        y=y-b.y;
        return *this;
    }
    MyComplex& operator*=(const MyComplex&b)
    {
        double tmpx,tmpy;
        tmpx=x;tmpy=y;
        x=tmpx*b.x-tmpy*b.y;
        y=tmpx*b.y+tmpy*b.x;
        return *this;
    }
    MyComplex& operator/=(const MyComplex&b)
    {
        double tmpx,tmpy;
        tmpx=x;tmpy=y;
        x=(tmpx*b.x+tmpy*b.y)/(b.x*b.x+b.y*b.y);
        y=(tmpy*b.x-tmpx*b.y)/(b.x*b.x+b.y*b.y);
        return *this;
    }
};
istream& operator>>(istream& is,MyComplex&obj)
{
    is>>obj.x;
    is>>obj.y;
    return is;
}
ostream& operator<<(ostream& os,const MyComplex&obj)
{
 
    os<<obj.x<<" "<<obj.y;
    return os;
}
int main()
{
  cout.setf(ios::fixed);
  cout.precision(2);
  MyComplex z1;
  MyComplex z2;
  cin >> z1 >> z2;
  cout << z1 + z2 <<endl;
  cout << z1 - z2 <<endl;
  cout << z1 * z2 <<endl;
  cout << z1 / z2 <<endl;
  cout << (z1 += z2) <<endl;
  cout << (z1 -= z2) <<endl;
  cout << (z1 *= z2) <<endl;
  cout << (z1 /= z2) <<endl;
 
    return 0;
}
